#!/bin/bash
#
# Instead of sending mined coins away to another address, this script sets up a utxo based system
# One "primary" utxo is maintained which allows for the bulk of rewards accruing
# One "feeder" utxo is maintained which is used for utxo splits
# Mined rewards are combined once their total is at least 10 KMD to start them accruing rewards
# Once 1 kmd is accrued it is all collected into the "primary"
#
# @see https://github.com/DeckerSU/komodo_scripts/blob/master/sendawaynn.sh
# @author webworker01
#
scriptpath="$( cd "$( dirname "${BASH_SOURCE[0]}" )" >/dev/null 2>&1 && pwd )"
source $scriptpath/main

cd "${BASH_SOURCE%/*}" || exit

if [[ ! -z $1 ]] && [[ "$1" == *"combine" ]]; then
    combine=1
else
    combine=0
fi

utxoamount=0.001
utxofeederhigh=9
utxofeederlow=3
collectinterestthreshold=1

unspent=$($komodocli listunspent)
minedcount=$(jq '[.[] | select(.generated==true)] | length' <<< $unspent)

#handle feeder if there's a mined block to work with
if (( minedcount > 0 )); then
    #check if feeder utxo needs to be fed
    feederutxo=$(jq -r --arg utxosize $utxoamount --arg feedermax $utxofeederhigh '[.[] | select (.generated==false and .spendable==true and .amount>($utxosize|tonumber) and .amount<($feedermax|tonumber))]' <<< $unspent)
    feederutxolength=$(jq -r '. | length' <<< $feederutxo)
    feederutxotxfee=$(calcFee ${feederutxolength} 1 "p2pkh" "p2pkh")
    feederutxovin=$(jq '[.[] | {"txid":.txid, "vout":.vout}]' <<< $feederutxo)
    feederamount=$(jq '[.[].amount] | add' <<< $feederutxo)
    feederfed=0

    feedutxo=$(jq -r --arg minsize $utxofeederlow '[.[] | select (.amount>($minsize|tonumber) and .generated==true and .spendable==true)] | sort_by(.amount)[0]' <<< $unspent)
    feedutxolength=$(jq -r '. | length' <<< $feedutxo)
    feedutxotxfee=$(calcFee ${feedutxolength} 1 "p2pk" "p2pkh")
    feedthis=$(jq -r '[. | {"txid":.txid, "vout":.vout}] | tostring' <<< $feedutxo)
    feedthisamount=$(jq -r '.amount' <<< $feedutxo)
    feedthisamountfixed=$( printf "%.8f" $(bc -l <<< "(${feedthisamount}-${feedutxotxfee})") )

    #if feeder utxo doesn't exist
    if [[ "$feederamount" == "null" ]]; then
        rawtxresult=$($komodocli createrawtransaction "${feedthis}" '''{ "'$nn_address'": '$feedthisamountfixed' }''')
        rawtxid=$(sendRaw ${rawtxresult})
        feederfed=1

        log "collectinterest" "create feeder $feedthisamountfixed - txid : $rawtxid"

    #if feeder utxo is getting low
    elif (( $(echo "$feederamount < $utxofeederlow" | bc -l) )); then
        combinefeederamounts=$( printf "%.8f" $(bc -l <<< "(${feederamount} + ${feedthisamountfixed} - ${feederutxotxfee})") )
        combinefeederutxos=$(jq -r --argjson arr1 "$feederutxovin" --argjson arr2 "$feedthis" -n '$arr1 + $arr2 | tostring')

        rawtxresult=$($komodocli createrawtransaction "${combinefeederutxos}" '''{ "'$nn_address'": '$combinefeederamounts' }''')
        rawtxid=$(sendRaw ${rawtxresult})
        feederfed=1

        log "collectinterest" "feed feeder $combinefeederamounts - txid : $rawtxid"
    fi
fi

#check if mined amount over a certain threshold
if (( minedcount > 3 )) || (( minedcount > 0 && combine > 0 )); then
    #unlock holding txs and calculate interest

    #lockedtx=$($komodocli listlockunspent | jq -c .)
    #$komodocli lockunspent true $lockedtx

    unspent=$($komodocli listunspent)
    alreadyutxounlocked=$(jq -r --arg feedermax $utxofeederhigh '[.[] | select (.generated==false and .spendable==true and .amount>($feedermax|tonumber))]' <<< $unspent)
    interest=$(jq -r '[.[].interest] | add' <<< $alreadyutxounlocked)
    interest=$( printf "%.8f" $interest )
    #printf "\nInterest: $interest\n"

    consolidateutxo=$(jq -r '[.[] | select (.generated==true and .spendable==true)]' <<< $unspent)
    #save one mined off the top to feed the feeder if needed
    if (( feederfed == 1 )); then
        consolidateutxo=$(jq -r '. | del(.[0])' <<< $consolidateutxo)
    fi
    consolidateutxolength=$(jq -r '. | length' <<< $consolidateutxo)
    consolidateutxotxfee=$(calcFee ${consolidateutxolength} 1 "p2pk" "p2pkh")
    consolidatethese=$(jq -r '[.[] | {"txid":.txid, "vout":.vout}]' <<< $consolidateutxo)
    consolidateamount=$(jq -r '[.[].amount] | add' <<< $consolidateutxo)

    # echo "$dt [collectinterest] current interest $interest - consolidateamount $consolidateamount" >> $nntoolslogfile

    #combine all
    #if (( $(echo "$interest > $collectinterestthreshold" | bc) )) || (( combine > 0 )); then
    if [[ "1" == "0" ]]; then
        alreadyconsolidated=$(jq '[.[] | {"txid":.txid, "vout":.vout}]' <<< $alreadyutxounlocked)
        alreadyconsolidateutxolength=$(jq -r '. | length' <<< $alreadyutxounlocked)
        alreadyconsolidateutxotxfee=$(calcFee ${alreadyconsolidateutxolength} 1 "p2pkh" "p2pkh")
        alreadyconsolidatedamount=$(jq -r '[.[].amount] | add' <<< $alreadyutxounlocked)

        consolidateamountfixed=$( printf "%.8f" $(bc -l <<< "(${consolidateamount}+${alreadyconsolidatedamount}+${interest}-${consolidateutxotxfee}-${alreadyconsolidateutxotxfee})") )

        combineconsolidateutxos=$(jq -r --argjson arr1 "$consolidatethese" --argjson arr2 "$alreadyconsolidated" -n '$arr1 + $arr2 | tostring')

        rawtxresult=$($komodocli createrawtransaction "${combineconsolidateutxos}" '''{ "'$nn_address'": '$consolidateamountfixed' }''')
        rawtxid=$(sendRaw ${rawtxresult})

        log "collectinterest" "combine all $consolidateamountfixed - interest: $interest - txid : $rawtxid"
    #combine mined
    else
        consolidateamountfixed=$( printf "%.8f" $(bc -l <<< "(${consolidateamount}-${consolidateutxotxfee})") )
        utxostring=$( jq -r '. | tostring' <<< $consolidatethese )
        rawtxresult=$($komodocli createrawtransaction "$utxostring" '''{ "'$nn_address'": '$consolidateamountfixed' }''')
        rawtxid=$(sendRaw ${rawtxresult})

        log "collectinterest" "combine mined $consolidateamountfixed - txid : $rawtxid"
    fi

    #$komodocli lockunspent false $lockedtx
fi

#lock existing utxos that aren't for the feeder
#alreadyutxo=$(echo $unspent | jq -r --arg feedermax $utxofeederhigh '[.[] | select (.generated==false and .spendable==true and .amount>($feedermax|tonumber))]')
#lockalreadyutxos=$(echo $alreadyutxo | jq -r '[.[] | {"txid":.txid, "vout":.vout}] | tostring')
#if [[ "$lockalreadyutxos" != "null" ]] && [[ "$lockalreadyutxos" != "[]" ]]; then
#    $komodocli lockunspent false $lockalreadyutxos
#fi
