#!/bin/bash
#
# One build script to rule them all
#
# The challenge: Old versions of non komodo coins need old versions of BerkeleyDB and Boost
# Annoyance in previous method: We build bdb for every single coin.. they should all be able to build from the same dependency
#
# Most bitcoin based coins will follow the same build steps
#
# Usage: ./build <coinname>
# e.g.: ./build LTC
#
# @author webworker01
#
scriptpath="$( cd "$( dirname "${BASH_SOURCE[0]}" )" >/dev/null 2>&1 && pwd )"
source $scriptpath/main

if [[ -z ${1-} ]]; then
    echo "Usage: build <coinname>"
    exit 0
else
    coinname=${1^^}
fi

#for git checking - path and remote branch
declare -A bitcoinbased=(
[BTC]="$HOME/bitcoin"
[LTC]="$HOME/litecoin"
[CHIPS]="$HOME/chips gcc9"
[CHIPS3]="$HOME/chips3 gcc9"
[AYA]="$HOME/AYAv2"
[EMC2]="$HOME/einsteinium gcc9"
[SFUSD]="$HOME/sfusd-core"
[MIL]="$HOME/mil gcc9"
)

declare -A komodobased=(
[KMD]="$HOME/komodo"
[VRSC]="$HOME/VerusCoin werror"
[MCL]="$HOME/marmara"
[TOKEL]="$HOME/tokel"
)

bdb_PATH="${HOME}/berkeleydb48"

gccversion=$(gcc --version | head -1 | awk '{print $4}' | cut -d"." -f1)

# Functions
berkeleydb48 () {
    if [[ ! -f "${bdb_PATH}/include/db_cxx.h" || ! -f "${bdb_PATH}/lib/libdb_cxx-4.8.a" ]]; then
        log "build" "installing BerkeleyDB48"
        cd $HOME
        mkdir -p $bdb_PATH
        wget -N 'http://download.oracle.com/berkeley-db/db-4.8.30.NC.tar.gz'
        echo '12edc0df75bf9abd7f82f821795bcee50f42cb2e5f76a6a281b85732798364ef db-4.8.30.NC.tar.gz' | sha256sum -c
        tar -xzvf db-4.8.30.NC.tar.gz

        cat <<-EOL >atomic-builtin-test.cpp
            #include <stdint.h>
            #include "atomic.h"

            int main() {
            db_atomic_t *p; atomic_value_t oldval; atomic_value_t newval;
            __atomic_compare_exchange(p, oldval, newval);
            return 0;
            }
EOL
        if g++ atomic-builtin-test.cpp -I./db-4.8.30.NC/dbinc -DHAVE_ATOMIC_SUPPORT -DHAVE_ATOMIC_X86_GCC_ASSEMBLY -o atomic-builtin-test 2>/dev/null; then
            log "build" "No changes to bdb source are needed ..."
            rm atomic-builtin-test 2>/dev/null
        else
            log "build" "Updating atomic.h file ..."
            sed -i 's/__atomic_compare_exchange/__atomic_compare_exchange_db/g' db-4.8.30.NC/dbinc/atomic.h
        fi

        cd db-4.8.30.NC/build_unix/
        ../dist/configure -enable-cxx -disable-shared -with-pic -prefix=$bdb_PATH

        make install

        #clean up
        cd $HOME
        rm atomic-builtin-test.cpp
        rm db-4.8.30.NC.tar.gz
        rm -rf db-4.8.30.NC
    else
        log "build" "BerkeleyDB 4.8 detected in ${bdb_PATH}"
    fi
}

boost165 () {
    #check if boost <= 1.71 already installed
    cd $scriptpath/c
    if make boost; then
        boostversion=$(./boost | sed 's/_/./g')
        rm boost
    else
        log "build" "error building boost check" "red"
    fi

    if (( $(echo "${boostversion-999} > 1.71" | bc -l) )); then
        log "build" "installing Boost 1_65_1"

        #remove apt installed versions
        sudo apt-get -y --purge remove libboost-all-dev libboost-doc libboost-dev libboost-system-dev libboost-filesystem-dev libboost-chrono-dev libboost-program-options-dev libboost-test-dev libboost-thread-dev
        sudo apt autoremove
        #remove source installed versions
        sudo rm -f /usr/lib/libboost_*
        sudo rm -f /usr/local/lib/libboost_*
        cd /usr/local/include && sudo rm -rf boost

        #build from source if not
        cd $HOME
        wget http://downloads.sourceforge.net/project/boost/boost/1.65.1/boost_1_65_1.tar.gz
        tar -zxvf boost_1_65_1.tar.gz
        cd boost_1_65_1
        # ./bootstrap.sh --prefix=/usr --with-libraries=atomic,date_time,exception,filesystem,iostreams,locale,program_options,regex,signals,system,test,thread,timer,log
        ./bootstrap.sh --prefix=/usr --with-libraries=chrono,filesystem,program_options,system,test,thread

        sudo ./b2 --with=all -j$(expr $(nproc) - 1) install

        #clean up
        cd $HOME
        rm boost_1_65_1.tar.gz
        rm -rf boost_1_65_1
    else
        log "build" "Valid Boost Version Installed: ${boostversion}"
    fi
}

buildBitcoinBased () {
    buildflags=${1-}

    git pull
    make clean
    ./autogen.sh

    if (( gccversion > 9 )) && [[ "${buildflags}" == "gcc9" ]]; then
        # install g++ 7 compiler for chips for now
        gccflags="CC=gcc-9 CXX=g++-9"
        log "build" "using g++9"
    fi

    ./configure LDFLAGS="-L${bdb_PATH}/lib/" CPPFLAGS="-I${bdb_PATH}/include/" ${gccflags-} --with-gui=no --disable-tests --disable-bench --without-miniupnpc --enable-experimental-asm --enable-static --disable-shared

    make -j$(expr $(nproc) - 1)
}

buildKomodoBased () {
    buildflags=${1-}

    git pull
    make clean

    #patches if gcc > 9
    if (( gccversion > 9 )); then
        if [[ "${buildflags}" =~ "stdexcept" ]]; then
            equihashfile="src/crypto/equihash.h"
            if ! grep -q "#include <stdexcept>" ${equihashfile}; then
                log "build" "Patching ${equihashfile} for G++ 10" "red"
                sed -i 's/#include <exception>/#include <exception>\n#include <stdexcept>/g' ${equihashfile}
            else
                log "build" "${equihashfile} compatible G++ 10"
            fi
        fi

        if [[ "${buildflags}" =~ "werror" ]]; then
            buildfile="zcutil/build.sh"
            if grep -q "CPPFLAGS='-g -Wno-builtin-declaration-mismatch -Werror'" ${buildfile}; then
                log "build" "Patching ${buildfile} for G++ 10" "red"
                sed -i "s/CPPFLAGS='-g -Wno-builtin-declaration-mismatch -Werror'/CPPFLAGS='-g -Wno-builtin-declaration-mismatch'/g" ${buildfile}
            else
                log "build" "${buildfile} compatible G++ 10"
            fi
        fi
    fi

    ./zcutil/build.sh -j$(expr $(nproc) - 1)
}

if [[ -v "bitcoinbased[${coinname}]" ]]; then
    log "build" "${coinname} - bitcoin based build"

    berkeleydb48
    boost165

    builddata=(${bitcoinbased[${coinname}]})
    cd ${builddata[0]}
    buildBitcoinBased ${builddata[1]-}

elif [[ -v "komodobased[${coinname}]" ]]; then
    log "build" "${coinname} - komodo based build"

    builddata=(${komodobased[${coinname}]})
    cd ${builddata[0]}
    buildKomodoBased ${builddata[1]-}

else
    log "build" "${coinname} - invalid coin specified" "red"
fi
